import detailService, { Review, ReviewSummary } from './DetailService';

class CommentService {
  /**
   * L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° c·ªßa s·∫£n ph·∫©m v·ªõi th√¥ng tin user
   */
  async getProductReviewsWithUsers(productId: string, forceRefresh: boolean = false): Promise<Review[]> {
    if (forceRefresh) {
      // Clear cache tr∆∞·ªõc khi l·∫•y d·ªØ li·ªáu m·ªõi
      detailService.clearCache();
    }
    return await detailService.getReviewsWithUserInfo(productId);
  }

  /**
   * L·∫•y t√≥m t·∫Øt ƒë√°nh gi√° s·∫£n ph·∫©m
   */
  async getReviewSummary(productId: string, forceRefresh: boolean = false): Promise<ReviewSummary> {
    if (forceRefresh) {
      // Clear cache tr∆∞·ªõc khi l·∫•y d·ªØ li·ªáu m·ªõi
      detailService.clearCache();
    }
    return await detailService.getReviewSummary(productId);
  }

  /**
   * Refresh t·∫•t c·∫£ d·ªØ li·ªáu ƒë√°nh gi√° cho m·ªôt s·∫£n ph·∫©m
   */
  async refreshProductReviews(productId: string): Promise<{ reviews: Review[], summary: ReviewSummary }> {
    try {
      // Force refresh cache
      await detailService.refreshCache();
      
      // L·∫•y d·ªØ li·ªáu m·ªõi
      const [reviews, summary] = await Promise.all([
        this.getProductReviewsWithUsers(productId, true),
        this.getReviewSummary(productId, true)
      ]);

      return { reviews, summary };
    } catch (error) {
      console.error('‚ùå L·ªói khi refresh ƒë√°nh gi√° s·∫£n ph·∫©m:', error);
      throw error;
    }
  }

  /**
   * L·∫•y t√™n user theo ID (v·ªõi cache)
   */
async getUserName(userId: string): Promise<string> {
  const name = await detailService.getUserInfo(userId);
  return name; // kh√¥ng fallback ·ªü ƒë√¢y n·ªØa, ƒë√£ x·ª≠ l√Ω ·ªü DetailService
}

  /**
   * X·ª≠ l√Ω hi·ªÉn th·ªã t√™n user t·ª´ review object
   */
 getUserDisplayName(review: Review): string {
  console.log("Username@@:", review);

  if (typeof review.Account_id === 'object' && review.Account_id.email) {
    // L·∫•y ph·∫ßn tr∆∞·ªõc d·∫•u @
    return review.Account_id.email.split('@')[0];
  }
  return 'Kh√°ch h√†ng';
}


  /**
   * Format ng√†y th√°ng cho ƒë√°nh gi√°
   */
  formatReviewDate(dateString: string): string {
    try {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now.getTime() - date.getTime());
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays === 1) {
        return 'H√¥m qua';
      } else if (diffDays <= 7) {
        return `${diffDays} ng√†y tr∆∞·ªõc`;
      } else if (diffDays <= 30) {
        const weeks = Math.floor(diffDays / 7);
        return `${weeks} tu·∫ßn tr∆∞·ªõc`;
      } else {
        return date.toLocaleDateString('vi-VN');
      }
    } catch (error) {
      return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  }

  /**
   * T√≠nh to√°n ph·∫ßn trƒÉm cho m·ªói m·ª©c sao
   */
  calculateRatingDistribution(reviews: Review[]): {
    [key: number]: { count: number; percentage: number }
  } {
    const distribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    const total = reviews.length;

    if (total === 0) {
      return {
        1: { count: 0, percentage: 0 },
        2: { count: 0, percentage: 0 },
        3: { count: 0, percentage: 0 },
        4: { count: 0, percentage: 0 },
        5: { count: 0, percentage: 0 },
      };
    }

    reviews.forEach(review => {
      if (review.star_rating >= 1 && review.star_rating <= 5) {
        distribution[review.star_rating]++;
      }
    });

    return {
      1: { count: distribution[1], percentage: Math.round((distribution[1] / total) * 100) },
      2: { count: distribution[2], percentage: Math.round((distribution[2] / total) * 100) },
      3: { count: distribution[3], percentage: Math.round((distribution[3] / total) * 100) },
      4: { count: distribution[4], percentage: Math.round((distribution[4] / total) * 100) },
      5: { count: distribution[5], percentage: Math.round((distribution[5] / total) * 100) },
    };
  }

  /**
   * L·∫•y text m√¥ t·∫£ cho rating
   */
  getRatingDescription(rating: number): string {
    switch (rating) {
      case 1: return 'R·∫•t t·ªá';
      case 2: return 'T·ªá';
      case 3: return 'Trung b√¨nh';
      case 4: return 'T·ªët';
      case 5: return 'Xu·∫•t s·∫Øc';
      default: return 'Ch∆∞a ƒë√°nh gi√°';
    }
  }

  /**
   * Ki·ªÉm tra review c√≥ h√¨nh ·∫£nh kh√¥ng
   */
  hasImage(review: Review): boolean {
    return !!(review.image && review.image.trim() !== '');
  }

  /**
   * L·∫•y URL h√¨nh ·∫£nh review
   */
  getReviewImageUri(review: Review): string | null {
    if (this.hasImage(review)) {
      return `data:image/jpeg;base64,${review.image}`;
    }
    return null;
  }

  /**
   * S·∫Øp x·∫øp reviews theo ti√™u ch√≠
   */
  sortReviews(reviews: Review[], sortBy: 'newest' | 'oldest' | 'highest' | 'lowest' = 'newest'): Review[] {
    const sorted = [...reviews];
    
    switch (sortBy) {
      case 'newest':
        return sorted.sort((a, b) => new Date(b.review_date).getTime() - new Date(a.review_date).getTime());
      case 'oldest':
        return sorted.sort((a, b) => new Date(a.review_date).getTime() - new Date(b.review_date).getTime());
      case 'highest':
        return sorted.sort((a, b) => b.star_rating - a.star_rating);
      case 'lowest':
        return sorted.sort((a, b) => a.star_rating - b.star_rating);
      default:
        return sorted;
    }
  }

  /**
   * L·ªçc reviews theo rating
   */
  filterReviewsByRating(reviews: Review[], rating: number): Review[] {
    if (rating === 0) return reviews; // 0 = all ratings
    return reviews.filter(review => review.star_rating === rating);
  }

  /**
   * L·ªçc reviews c√≥ h√¨nh ·∫£nh
   */
  getReviewsWithImages(reviews: Review[]): Review[] {
    return reviews.filter(review => this.hasImage(review));
  }

  /**
   * T√≠nh ph·∫ßn trƒÉm reviews t√≠ch c·ª±c (4-5 sao)
   */
  getPositiveReviewPercentage(reviews: Review[]): number {
    if (reviews.length === 0) return 0;
    const positiveReviews = reviews.filter(review => review.star_rating >= 4);
    return Math.round((positiveReviews.length / reviews.length) * 100);
  }

  /**
   * Clear to√†n b·ªô cache
   */
  clearCache(): void {
    detailService.clearCache();
    console.log('üóëÔ∏è CommentService: ƒê√£ x√≥a cache');
  }

  /**
   * Refresh cache
   */
  async refreshCache(): Promise<void> {
    await detailService.refreshCache();
    console.log('üîÑ CommentService: ƒê√£ refresh cache');
  }
}

// Export instance
export const commentService = new CommentService();
export default commentService;