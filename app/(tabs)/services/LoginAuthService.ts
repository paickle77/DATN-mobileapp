// services/LoginAuthService.ts
import axios from 'axios';
import bcrypt from 'bcryptjs';
import { saveUserData } from '../screens/utils/storage';
import { BASE_URL } from './api';

export interface User {
  role: string;
  _id: string;
  email: string;
  password: string;
  name?: string;
  phone: string;
}

export interface LoginResponse {
  success: boolean;
  message: string;
  user?: User;
  role?: string;
}

class LoginAuthService {
  private apiUrl = `${BASE_URL}/login`;

  // L·∫•y danh s√°ch users ƒë·ªÉ login
  async getAllUsers(): Promise<User[]> {
    try {
      const response = await axios.get(this.apiUrl);
      
      if (response.data && response.data.data) {
        console.log('L·∫•y API th√†nh c√¥ng');
        return response.data.data;
      }
      
      throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng');
    } catch (error) {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu:', error);
      throw error;
    }
  }

  // Ki·ªÉm tra m·∫≠t kh·∫©u v·ªõi BCrypt
  private async comparePassword(plainPassword: string, hashedPassword: string): Promise<boolean> {
    try {
      const isMatch = await bcrypt.compare(plainPassword, hashedPassword);
      return isMatch;
    } catch (error) {
      console.error('L·ªói khi so s√°nh m·∫≠t kh·∫©u:', error);
      return false;
    }
  }

  // M√£ h√≥a m·∫≠t kh·∫©u v·ªõi BCrypt (ti·ªán √≠ch b·ªï sung)
  async hashPassword(password: string): Promise<string> {
    try {
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash(password, saltRounds);
      return hashedPassword;
    } catch (error) {
      console.error('L·ªói khi m√£ h√≥a m·∫≠t kh·∫©u:', error);
      throw error;
    }
  }

  // X·ª≠ l√Ω login v·ªõi BCrypt
  // services/LoginAuthService.ts
async login(email: string, password: string): Promise<any> {
  try {
    const response = await axios.post(`${BASE_URL}/login`, { email, password });
    console.log('üì• FULL RESPONSE:', response.data);

    const { success, message, data } = response.data;

    if (success && data?.token && data?.account) {
      const { token, account } = data;

      // ‚úÖ L∆∞u token v√† account ID v√†o AsyncStorage
      await saveUserData({ key: 'token', value: token });
      await saveUserData({ key: 'userData', value: account._id });

      return {
        success,
        message,
        data // ‚úÖ Tr·∫£ l·∫°i to√†n b·ªô data ƒë·ªÉ l·∫•y account.role, profile...
      };
    } else {
      return {
        success: false,
        message: message || 'Sai th√¥ng tin ƒëƒÉng nh·∫≠p',
      };
    }
  } catch (error: any) {
    // console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error);
    return {
      success: false,
      message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra t√†i kho·∫£n v√† m·∫≠t kh·∫©u.',
    };
  }
}



  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra m·∫≠t kh·∫©u m√† kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p
  async verifyPassword(email: string, password: string): Promise<boolean> {
    try {
      const users = await this.getAllUsers();
      const user = users.find((u: User) => u.email === email);
      
      if (!user) {
        return false;
      }

      return await this.comparePassword(password, user.password);
    } catch (error) {
      console.error('L·ªói khi x√°c th·ª±c m·∫≠t kh·∫©u:', error);
      return false;
    }
  }
}

// Export instance
export const loginAuthService = new LoginAuthService();
export default loginAuthService;