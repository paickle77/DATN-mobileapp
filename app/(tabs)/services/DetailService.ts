import axios from 'axios';
import { BASE_URL } from './api';

export interface Product {
  _id: string;
  name: string;
  description: string;
  price: number;
  discount_price: number;
  image_url: string;
  rating: number;
  is_active: boolean;
  category_id: {
    _id: string;
    name: string;
  };
  ingredient_id: {
    _id: string;
    name: string;
  }[];
}

export interface Size {
  _id: string;
  product_id: string;
  quantity: number;
  size: string;
  price_increase: number;
}

export interface Favorite {
  _id: string;
  user_id: string;
  product_id: {
    _id: string;
  };
}

export interface CartItem {
  _id: string;
  user_id: string;
  product_id: {
    _id: string;
  };
  size_id: {
    _id: string;
  };
  quantity: number;
}

export interface Review {
  _id: string;
  user_id: string | { _id: string; name: string };
  product_id: string | { _id: string };
  review_date: string;
  star_rating: number;
  content: string;
  image?: string;
}

export interface ReviewSummary {
  averageRating: number;
  totalReviews: number;
  reviews: Review[];
}

export interface ApiResponse<T> {
  success: boolean;
  message: string;
  data: T;
}

class DetailService {
  public baseUrl = BASE_URL;
  
  // Cache ƒë·ªÉ t·ªëi ∆∞u h√≥a
  private reviewsCache: { [key: string]: Review[] } = {};
  private allReviewsCache: Review[] | null = null;
  private cacheTimestamp: number = 0;
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

  /**
   * L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo ID
   */
  async getProductDetails(productId: string): Promise<Product | null> {
    try {
      const response = await axios.get(`${this.baseUrl}/productsandcategoryid`);
      const products = response.data.data || response.data;
      const foundProduct = products.find((item: Product) => item._id === productId);
      return foundProduct || null;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:', error);
      throw new Error('L·ªói khi t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m');
    }
  }

  /**
   * L·∫•y danh s√°ch size theo product ID
   */
  async getProductSizes(productId: string): Promise<Size[]> {
    try {
      const response = await axios.get(`${this.baseUrl}/sizes`);
      const allSizes = response.data.data || response.data;
      console.log(productId, 'T√¨m ki·∫øm size cho s·∫£n ph·∫©m');
      const foundSizes = allSizes.filter((size: Size) => size.product_id === productId);
      console.log('Danh s√°ch size t√¨m th·∫•y:', foundSizes);
      return foundSizes;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch size:', error);
      throw new Error('L·ªói khi t·∫£i danh s√°ch size');
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i y√™u th√≠ch c·ªßa s·∫£n ph·∫©m
   */
  async checkFavoriteStatus(userId: string, productId: string): Promise<boolean> {
    try {
      const response = await axios.get(`${this.baseUrl}/favorites2`);
      const favorites = response.data.data;
      const foundFavorite = favorites.find(
        (item: Favorite) => item.user_id === userId && item.product_id?._id === productId
      );
      return !!foundFavorite;
    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i y√™u th√≠ch:', error);
      return false;
    }
  }

  /**
   * Th√™m s·∫£n ph·∫©m v√†o danh s√°ch y√™u th√≠ch
   */
  async addToFavorites(userId: string, productId: string): Promise<void> {
    try {
      await axios.post(`${this.baseUrl}/favorites`, {
        user_id: userId,
        product_id: productId
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi th√™m v√†o y√™u th√≠ch:', error);
      throw new Error('Kh√¥ng th·ªÉ th√™m v√†o danh s√°ch y√™u th√≠ch');
    }
  }

  /**
   * X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch y√™u th√≠ch
   */
  async removeFromFavorites(userId: string, productId: string): Promise<void> {
    try {
      const response = await axios.get(`${this.baseUrl}/favorites2`);
      const favorites = response.data.data;
      const foundFavorite = favorites.find(
        (item: Favorite) => item.user_id === userId && item.product_id?._id === productId
      );
      
      if (foundFavorite) {
        await axios.delete(`${this.baseUrl}/favorites/${foundFavorite._id}`);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi x√≥a kh·ªèi y√™u th√≠ch:', error);
      throw new Error('Kh√¥ng th·ªÉ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch');
    }
  }

  /**
   * Toggle tr·∫°ng th√°i y√™u th√≠ch
   */
  async toggleFavorite(userId: string, productId: string): Promise<{ isAdded: boolean }> {
    try {
      const response = await axios.get(`${this.baseUrl}/favorites2`);
      const favorites = response.data.data;
      const foundFavorite = favorites.find(
        (item: Favorite) => item.user_id === userId && item.product_id?._id === productId
      );

      if (foundFavorite) {
        await axios.delete(`${this.baseUrl}/favorites/${foundFavorite._id}`);
        return { isAdded: false };
      } else {
        await axios.post(`${this.baseUrl}/favorites`, {
          user_id: userId,
          product_id: productId
        });
        return { isAdded: true };
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi toggle y√™u th√≠ch:', error);
      throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh s√°ch y√™u th√≠ch');
    }
  }

  /**
   * L·∫•y danh s√°ch gi·ªè h√†ng
   */
  async getCartItems(): Promise<CartItem[]> {
    try {
      const response = await axios.get(`${this.baseUrl}/GetAllCarts`);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y gi·ªè h√†ng:', error);
      throw new Error('L·ªói khi t·∫£i gi·ªè h√†ng');
    }
  }

  /**
   * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
   */
  async addToCart(userId: string, productId: string, sizeId: string, quantity: number): Promise<void> {
    try {
      await axios.post(`${this.baseUrl}/addtocarts`, {
        user_id: userId,
        product_id: productId,
        size_id: sizeId,
        quantity: quantity
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:', error);
      throw new Error('Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng');
    }
  }

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
   */
  async updateCartItemQuantity(cartItemId: string, quantity: number): Promise<void> {
    try {
      await axios.put(`${this.baseUrl}/carts/${cartItemId}`, {
        quantity: quantity
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:', error);
      throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng');
    }
  }

  /**
   * X·ª≠ l√Ω th√™m v√†o gi·ªè h√†ng (ki·ªÉm tra t·ªìn t·∫°i v√† c·∫≠p nh·∫≠t)
   */
  async handleAddToCart(
    userId: string, 
    productId: string, 
    sizeId: string, 
    quantity: number
  ): Promise<{ isUpdate: boolean; totalQuantity: number }> {
    try {
      const cartItems = await this.getCartItems();
      
      const existingCartItem = cartItems.find(
        (item: CartItem) =>
          item.user_id === userId &&
          item.product_id?._id === productId &&
          item.size_id?._id === sizeId
      );

      if (existingCartItem) {
        const updatedQuantity = existingCartItem.quantity + quantity;
        await this.updateCartItemQuantity(existingCartItem._id, updatedQuantity);
        return { isUpdate: true, totalQuantity: updatedQuantity };
      } else {
        await this.addToCart(userId, productId, sizeId, quantity);
        return { isUpdate: false, totalQuantity: quantity };
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω gi·ªè h√†ng:', error);
      throw new Error('Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }

  /**
   * ‚ú® T·ªêI ∆ØU H√ìA: L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° m·ªôt l·∫ßn v·ªõi cache
   */
  async getAllReviews(forceRefresh: boolean = false): Promise<Review[]> {
    const now = Date.now();
    
    // Ki·ªÉm tra cache
    if (!forceRefresh && this.allReviewsCache && (now - this.cacheTimestamp) < this.CACHE_DURATION) {
      console.log('üì± S·ª≠ d·ª•ng cache reviews');
      return this.allReviewsCache;
    }

    try {
      console.log('üîÑ ƒêang t·∫£i t·∫•t c·∫£ reviews t·ª´ API...');
      const response = await axios.get(`${this.baseUrl}/GetAllReview`);
      const allReviews = response.data.data || [];
      
      // C·∫≠p nh·∫≠t cache
      this.allReviewsCache = allReviews;
      this.cacheTimestamp = now;
      
      console.log(`‚úÖ ƒê√£ cache ${allReviews.length} reviews`);
      return allReviews;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ ƒë√°nh gi√°:', error);
      // Tr·∫£ v·ªÅ cache c≈© n·∫øu c√≥ l·ªói
      return this.allReviewsCache || [];
    }
  }

  /**
   * ‚ú® T·ªêI ∆ØU H√ìA: T√≠nh to√°n t·∫•t c·∫£ ratings m·ªôt l·∫ßn
   */
  async calculateAllProductRatings(productIds: string[]): Promise<{ [key: string]: number }> {
    try {
      const allReviews = await this.getAllReviews();
      const ratingsMap: { [key: string]: number } = {};

      // Kh·ªüi t·∫°o t·∫•t c·∫£ products v·ªõi rating 0
      productIds.forEach(productId => {
        ratingsMap[productId] = 0;
      });

      // Group reviews theo product_id
      const reviewsByProduct: { [key: string]: Review[] } = {};
      
      allReviews.forEach(review => {
        const productId = typeof review.product_id === 'object' 
          ? review.product_id._id 
          : review.product_id;
        
        if (productIds.includes(productId)) {
          if (!reviewsByProduct[productId]) {
            reviewsByProduct[productId] = [];
          }
          reviewsByProduct[productId].push(review);
        }
      });

      // T√≠nh rating trung b√¨nh cho t·ª´ng s·∫£n ph·∫©m
      Object.keys(reviewsByProduct).forEach(productId => {
        const reviews = reviewsByProduct[productId];
        if (reviews.length > 0) {
          const totalRating = reviews.reduce((sum, review) => sum + (review.star_rating || 0), 0);
          ratingsMap[productId] = Math.round((totalRating / reviews.length) * 10) / 10;
        }
      });

      console.log(`üìä ƒê√£ t√≠nh rating cho ${Object.keys(ratingsMap).length} s·∫£n ph·∫©m`);
      return ratingsMap;
    } catch (error) {
      console.error('‚ùå L·ªói khi t√≠nh to√°n ratings:', error);
      // Fallback: t·∫°o ratings m·∫∑c ƒë·ªãnh
      const fallbackRatings: { [key: string]: number } = {};
      productIds.forEach(productId => {
        fallbackRatings[productId] = 0;
      });
      return fallbackRatings;
    }
  }

  /**
   * L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° c·ªßa s·∫£n ph·∫©m (s·ª≠ d·ª•ng cache)
   */
  async getProductReviews(productId: string): Promise<Review[]> {
    try {
      // Ki·ªÉm tra cache ri√™ng cho s·∫£n ph·∫©m n√†y
      if (this.reviewsCache[productId]) {
        console.log(`üì± S·ª≠ d·ª•ng cache reviews cho s·∫£n ph·∫©m ${productId}`);
        return this.reviewsCache[productId];
      }

      const allReviews = await this.getAllReviews();
      const productReviews = allReviews.filter(review => {
        const reviewProductId = typeof review.product_id === 'object' 
          ? review.product_id._id 
          : review.product_id;
        return reviewProductId === productId;
      });

      // Cache k·∫øt qu·∫£
      this.reviewsCache[productId] = productReviews;
      
      return productReviews;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y ƒë√°nh gi√° s·∫£n ph·∫©m:', error);
      throw new Error('L·ªói khi t·∫£i ƒë√°nh gi√° s·∫£n ph·∫©m');
    }
  }

  /**
   * L·∫•y th√¥ng tin user theo ID
   */
  async getUserInfo(userId: string): Promise<string> {
    try {
      const response = await axios.get(`${this.baseUrl}/users/${userId}`);
      return response.data.data?.name || 'Kh√°ch h√†ng';
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin user:', error);
      return 'Kh√°ch h√†ng';
    }
  }

  /**
   * ‚ú® T·ªêI ∆ØU H√ìA: L·∫•y t√≥m t·∫Øt ƒë√°nh gi√° s·∫£n ph·∫©m (s·ª≠ d·ª•ng cache)
   */
  async getReviewSummary(productId: string): Promise<ReviewSummary> {
    try {
      const reviews = await this.getProductReviews(productId);
      
      if (reviews.length === 0) {
        return {
          averageRating: 0,
          totalReviews: 0,
          reviews: []
        };
      }

      const averageRating = reviews.reduce((sum, review) => sum + review.star_rating, 0) / reviews.length;
      
      return {
        averageRating: Math.round(averageRating * 10) / 10, // L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
        totalReviews: reviews.length,
        reviews: reviews
      };
    } catch (error) {
      console.error('‚ùå L·ªói khi t√≠nh to√°n t√≥m t·∫Øt ƒë√°nh gi√°:', error);
      return {
        averageRating: 0,
        totalReviews: 0,
        reviews: []
      };
    }
  }

  /**
   * L·∫•y ƒë√°nh gi√° v·ªõi th√¥ng tin user ƒë√£ populate
   */
  async getReviewsWithUserInfo(productId: string): Promise<Review[]> {
    try {
      const reviews = await this.getProductReviews(productId);
      
      // L·∫•y th√¥ng tin user cho c√°c review ch∆∞a c√≥ th√¥ng tin user
      const reviewsWithUserInfo = await Promise.all(
        reviews.map(async (review) => {
          if (typeof review.user_id === 'string') {
            try {
              const userName = await this.getUserInfo(review.user_id);
              return {
                ...review,
                user_id: {
                  _id: review.user_id,
                  name: userName
                }
              };
            } catch (error) {
              return {
                ...review,
                user_id: {
                  _id: review.user_id,
                  name: 'Kh√°ch h√†ng'
                }
              };
            }
          }
          return review;
        })
      );

      return reviewsWithUserInfo;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y ƒë√°nh gi√° v·ªõi th√¥ng tin user:', error);
      throw new Error('L·ªói khi t·∫£i th√¥ng tin ƒë√°nh gi√°');
    }
  }

  /**
   * ‚ú® T√çNH NƒÇNG M·ªöI: X√≥a cache khi c·∫ßn
   */
  clearCache(): void {
    this.reviewsCache = {};
    this.allReviewsCache = null;
    this.cacheTimestamp = 0;
    console.log('üóëÔ∏è ƒê√£ x√≥a cache reviews');
  }

  /**
   * ‚ú® T√çNH NƒÇNG M·ªöI: Refresh cache
   */
  async refreshCache(): Promise<void> {
    console.log('üîÑ ƒêang refresh cache...');
    await this.getAllReviews(true);
  }
}

// Export instance
export const detailService = new DetailService();
export default detailService;