// services/VoucherService.ts
import axios from 'axios';
import dayjs from 'dayjs';
import { getUserData } from '../screens/utils/storage';
import { BASE_URL } from './api';

// --- INTERFACES ---

export interface Voucher {
  _id: string;
  code: string;
  description: string;
  discount_percent: number;
  start_date: string;
  end_date: string;
  quantity: number;           // t·ªïng s·ªë l∆∞·ª£ng ph√°t h√†nh
  used_count: number;         // ƒë√£ d√πng bao nhi√™u
  max_usage_per_user: number; // t·ªëi ƒëa m·ªói user ƒë∆∞·ª£c d√πng
  status: 'active' | 'inactive'; // tr·∫°ng th√°i voucher
}

export interface UserVoucher {
  _id: string;
  Account_id: string;
  voucher_id: string | Voucher;
  status: 'active' | 'used' | 'expired'; // tr·∫°ng th√°i s·ª≠ d·ª•ng
  saved_at: string;           // th·ªùi gian l∆∞u voucher
  used_at?: string;           // th·ªùi gian s·ª≠ d·ª•ng (n·∫øu c√≥)
}

export interface VoucherResponse {
  success: boolean;
  message: string;
  data: Voucher[];
}

export interface UserVoucherResponse {
  success: boolean;
  message: string;
  data: UserVoucher[];
}

export interface UseVoucherResponse {
  success: boolean;
  message: string;
  data?: {
    voucherUser: UserVoucher;
    voucher: {
      code: string;
      discount_percent: number;
      used_count: number;
      quantity: number;
    };
  };
}

// --- MAIN CLASS ---

class VoucherService {
  // Helper: L·∫•y accountId t·ª´ local storage
  private async getAccountId(): Promise<string> {
    const userData = await getUserData('userData');
    if (typeof userData === 'string') return userData;
    if (typeof userData === 'object' && userData !== null) {
      return userData._id || userData.id || userData.accountId;
    }
    throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n');
  }

  // Helper: Populate th√¥ng tin voucher n·∫øu ch·ªâ l√† ID
  private async populateVoucherDetails(userVouchers: UserVoucher[]): Promise<void> {
    try {
      const voucherIds = userVouchers
        .filter(item => typeof item.voucher_id === 'string')
        .map(item => item.voucher_id as string);

      if (voucherIds.length === 0) return;

      const voucherPromises = voucherIds.map(id => this.getVoucherById(id));
      const voucherResults = await Promise.allSettled(voucherPromises);

      userVouchers.forEach(userVoucher => {
        if (typeof userVoucher.voucher_id === 'string') {
          const voucherIndex = voucherIds.indexOf(userVoucher.voucher_id);
          const result = voucherResults[voucherIndex];
          if (result.status === 'fulfilled' && result.value.success) {
            userVoucher.voucher_id = result.value.data!;
          }
        }
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi populate voucher details:', error);
    }
  }

  // L·∫•y t·∫•t c·∫£ voucher c√≥ s·∫µn
  async getAllVouchers(): Promise<VoucherResponse> {
    try {
      const response = await axios.get(`${BASE_URL}/vouchers`);
      let vouchers: Voucher[] = response.data.data;

      // L·ªçc b·ªè voucher ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng
      vouchers = vouchers.filter(
        (voucher) => voucher.used_count < voucher.quantity
      );

      console.log('‚úÖ L·∫•y danh s√°ch voucher th√†nh c√¥ng:', vouchers);
      return { ...response.data, data: vouchers };
    } catch (error: any) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch voucher:', error);
      throw error;
    }
  }


  // L·∫•y danh s√°ch voucher ƒë√£ l∆∞u theo account
  // L·∫•y danh s√°ch voucher ƒë√£ l∆∞u theo account
async getUserVouchers(): Promise<UserVoucherResponse> {
  try {
    const accountId = await this.getAccountId();
    console.log('üîç ƒêang l·∫•y danh s√°ch voucher ƒë√£ save c·ªßa account:', accountId);
    const response = await axios.get(`${BASE_URL}/voucher_users/account/${accountId}`);
    let userVouchers = response.data.data as UserVoucher[];

    const res = await axios.get(`${BASE_URL}/vouchers`);
    let vouchers: Voucher[] = res.data.data;

    // üëâ L·ªçc voucher_user: lo·∫°i b·ªè nh·ªØng c√°i ƒë√£ h·∫øt h·∫°n, h·∫øt l∆∞·ª£t, ho·∫∑c ƒë√£ d√πng
    const now = new Date();
      userVouchers = userVouchers.filter((uv) => {
        const voucher = vouchers.find((v) => v._id === uv.voucher_id);
        if (!voucher) return false;

        const isExpired = new Date(voucher.end_date) < now;
        const isOutOfQuantity = voucher.used_count >= voucher.quantity;
        const isUsed = uv.status === "used";

        return !(isExpired || isOutOfQuantity || isUsed);
      });

      return {
        success: true,
        message: "L·∫•y danh s√°ch voucher ƒë√£ l∆∞u th√†nh c√¥ng",
        data: userVouchers,
      };
    } catch (error: any) {
      console.error('‚ùå L·ªói khi l·∫•y danh s√°ch voucher account:', error);
      return {
        success: false,
        message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch voucher",
        data: [],
      };
    }
  }


  // L·∫•y voucher ch∆∞a l∆∞u
  async getAvailableVouchers(): Promise<VoucherResponse> {
    try {
      const allVouchersResponse = await this.getAllVouchers();
      if (!allVouchersResponse.success) {
        throw new Error(allVouchersResponse.message);
      }

      const userVouchersResponse = await this.getUserVouchers();
      const savedVoucherIds = userVouchersResponse.data.map(item =>
        typeof item.voucher_id === 'object' ? item.voucher_id._id : item.voucher_id
      );

      const availableVouchers = allVouchersResponse.data.filter(voucher =>
        !savedVoucherIds.includes(voucher._id) &&
        voucher.status === 'active' &&
        dayjs(voucher.end_date).isAfter(dayjs())
      );

      return {
        success: true,
        message: 'L·∫•y danh s√°ch voucher kh·∫£ d·ª•ng th√†nh c√¥ng',
        data: availableVouchers
      };
    } catch (error: any) {
      console.error('‚ùå L·ªói khi l·∫•y voucher kh·∫£ d·ª•ng:', error);
      throw error;
    }
  }

  // L∆∞u voucher v√†o danh s√°ch v·ªõi ki·ªÉm tra tr√πng l·∫∑p
  async saveVoucherToList(voucher: Voucher): Promise<any> {
  try {
    // Ki·ªÉm tra tr∆∞·ªõc khi g·ªçi API
    if (voucher.used_count >= voucher.quantity) {
      throw new Error('Voucher n√†y ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng!');
    }

    const accountId = await this.getAccountId();
    const payload = {
      Account_id: accountId,
      voucher_id: voucher._id
    };

    console.log('üíæ ƒêang l∆∞u voucher:', payload);
    const response = await axios.post(`${BASE_URL}/voucher_users/save`, payload);
    console.log('‚úÖ L∆∞u voucher th√†nh c√¥ng:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå L·ªói khi l∆∞u voucher:', error);

    if (error.response?.status === 409) {
      throw new Error('B·∫°n ƒë√£ l∆∞u voucher n√†y r·ªìi!');
    } else if (error.response?.status === 400) {
      throw new Error(error.response.data.message || 'Voucher kh√¥ng h·ª£p l·ªá');
    } else if (error.response?.status === 404) {
      throw new Error('Voucher kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a');
    }

    throw error.response?.data || error;
  }
}


  // Xo√° voucher ƒë√£ l∆∞u
  async removeVoucherFromList(userVoucherId: string): Promise<any> {
    try {
      const response = await axios.delete(`${BASE_URL}/voucher_users/${userVoucherId}`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå L·ªói khi x√≥a voucher:', error);
      throw error;
    }
  }

  // ƒê√°nh d·∫•u voucher ƒë√£ s·ª≠ d·ª•ng (g·ªçi khi ƒë∆°n h√†ng th√†nh c√¥ng)
  async markVoucherAsUsed(voucherUserId: string): Promise<UseVoucherResponse> {
    try {
      const payload = { voucherUserId };

      console.log('üéØ ƒêang ƒë√°nh d·∫•u voucher ƒë√£ s·ª≠ d·ª•ng:', payload);
      const response = await axios.post(`${BASE_URL}/voucher_users/mark-used`, payload);
      console.log('‚úÖ ƒê√°nh d·∫•u voucher th√†nh c√¥ng:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå L·ªói khi ƒë√°nh d·∫•u voucher ƒë√£ s·ª≠ d·ª•ng:', error);
      throw error.response?.data || error;
    }
  }

  // S·ª≠ d·ª•ng voucher (API c≈© - gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
  async useVoucher(voucherUserId: string): Promise<UseVoucherResponse> {
    try {
      const accountId = await this.getAccountId();

      const payload = {
        accountId,
        voucherUserId
      };

      console.log('üé´ ƒêang s·ª≠ d·ª•ng voucher:', payload);
      const response = await axios.post(`${BASE_URL}/voucher_users/use`, payload);
      console.log('‚úÖ S·ª≠ d·ª•ng voucher th√†nh c√¥ng:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå L·ªói khi s·ª≠ d·ª•ng voucher:', error);
      throw error.response?.data || error;
    }
  }

  // C·∫≠p nh·∫≠t voucher h·∫øt h·∫°n t·ª± ƒë·ªông
  async updateExpiredVouchers(): Promise<any> {
    try {
      console.log('‚è∞ ƒêang c·∫≠p nh·∫≠t voucher h·∫øt h·∫°n...');
      const response = await axios.post(`${BASE_URL}/voucher_users/update-expired`);
      console.log('‚úÖ C·∫≠p nh·∫≠t voucher h·∫øt h·∫°n th√†nh c√¥ng:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t voucher h·∫øt h·∫°n:', error);
      throw error;
    }
  }

  // L·∫•y chi ti·∫øt m·ªôt voucher theo ID
  async getVoucherById(id: string): Promise<{ success: boolean; message: string; data?: Voucher }> {
    try {
      const response = await axios.get(`${BASE_URL}/vouchers/${id}`);
      return response.data;
    } catch (error: any) {
      return {
        success: false,
        message: error?.response?.data?.message || 'Kh√¥ng t√¨m th·∫•y voucher'
      };
    }
  }
}

export default new VoucherService();