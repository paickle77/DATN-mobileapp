import { RouteProp, useNavigation, useRoute } from '@react-navigation/native';
import React, { useEffect, useState } from 'react';
import { Alert, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { AddressService } from '../../services/AddressService';
import { saveUserData } from '../utils/storage';

type RootStackParamList = {
  CompleteProfile: {
    address?: string;
    email?: string;
    password?: string;
    fullName?: string;
    phone?: string;
    gender?: string;
    avatar?: string;
    id: string;
  };
  Address: {
    email?: string;
    password?: string;
    fullName?: string;
    phone?: string;
    gender?: string;
    avatar?: string;
    account_id: string;
    user_id?: string; // ‚úÖ TH√äM: Th√™m user_id
    latitude?: string;
    longitude?: string;
    address?: string;
    profile_id?: string;
  };
};

const AddressScreen = () => {
  const navigation = useNavigation() as any;
  const route = useRoute<RouteProp<RootStackParamList, 'Address'>>();
  const { fullName, phone } = route.params;
  const [locationData, setLocationData] = useState({
    latitude: '',
    longitude: '',
    address: ''
  });
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (route.params) {
      const {
        account_id,
        user_id,
        fullName,
        phone,
        avatar,
        latitude,
        longitude,
        address
      } = route.params || {};

      setLocationData({
        latitude: latitude || '',
        longitude: longitude || '',
        address: address || ''
      });

      const finalAccountId = account_id; // ‚úÖ S·ª≠ d·ª•ng account_id
      const finalUserId = user_id || route.params?.profile_id; // ‚úÖ S·ª≠ d·ª•ng user_id ho·∫∑c profile_id
      console.log('Account ID nh·∫≠n ƒë∆∞·ª£c t·ª´ CompleteProfile:', finalAccountId);
      console.log('User ID nh·∫≠n ƒë∆∞·ª£c t·ª´ CompleteProfile:', finalUserId);
      console.log('Vƒ© ƒë·ªô (latitude):', latitude);
      console.log('Kinh ƒë·ªô (longitude):', longitude);
    }
  }, [route.params]);

  const displayAddress = locationData.address
    ? locationData.address
    : locationData.latitude && locationData.longitude
      ? `Lat: ${locationData.latitude}, Lng: ${locationData.longitude}`
      : 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ ƒë∆∞·ª£c ch·ªçn';

  const handleCompleteAddress = async () => {
    if (!locationData.address && !locationData.latitude && !locationData.longitude) {
      Alert.alert('Th√¥ng b√°o', 'Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ tr∆∞·ªõc khi ti·∫øp t·ª•c!');
      return;
    }

    setIsLoading(true);
    try {
      const { latitude, longitude, address } = locationData;

      let addressData: any = {
        name: fullName,
        phone: phone,
        province: 'H√† N·ªôi', // üöÄ Ship trong H√† N·ªôi
      };

      if (address) {
        const parsedAddress = AddressService.parseAddressString(address);
        addressData = { ...addressData, ...parsedAddress, province: 'H√† N·ªôi' };
      } else if (latitude && longitude) {
        addressData = { ...addressData, latitude, longitude };
      }

      console.log('üîº D·ªØ li·ªáu g·ª≠i l√™n API:', JSON.stringify(addressData, null, 2));

      const finalAccountId = route.params?.account_id;
      if (!finalAccountId) {
        Alert.alert('L·ªói', 'Kh√¥ng t√¨m th·∫•y account ID. Vui l√≤ng th·ª≠ l·∫°i!');
        return;
      }

      // ‚úÖ G·ªçi API v√† nh·∫≠n object ƒë·ªãa ch·ªâ m·ªõi
      const newAddress = await AddressService.createFirstAddress(finalAccountId, addressData);
      console.log('‚úÖ ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng:', newAddress);
    console.log('üì¶ ƒê·ªãa ch·ªâ m·ªõi:',newAddress);
      // ‚úÖ L∆∞u to√†n b·ªô ID v√†o AsyncStorage
      await saveUserData({ key: 'accountId', value: finalAccountId });
      if (route.params?.user_id) {
        await saveUserData({ key: 'userId', value: route.params.user_id });
      }
      if (route.params?.profile_id) {
        await saveUserData({ key: 'profileId', value: route.params.profile_id });
      }
      await saveUserData({ key: 'userName', value: fullName || '' });
      await saveUserData({ key: 'userPhone', value: phone || '' });
      await saveUserData({ key: 'userEmail', value: route.params?.email || '' });

      // ‚úÖ L∆∞u full address object v√† addressId
      if (newAddress && newAddress._id) {
        await saveUserData({ key: 'addressId', value: newAddress._id });
        await saveUserData({ key: 'defaultAddress', value: JSON.stringify(newAddress) }); // ‚úÖ L∆∞u full object
        console.log('üì¶ Address ID t·ª´ API:', newAddress._id);
        console.log('üì¶ Full Address t·ª´ API:', JSON.stringify(newAddress, null, 2));
      }

      Alert.alert('Th√†nh c√¥ng', 'ƒê·ªãa ch·ªâ ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!', [
        { text: 'OK', onPress: () => navigation.navigate('TabNavigator') }
      ]);

    } catch (error: any) {
      console.error('‚ùå L·ªói khi g·ª≠i API:', error?.response?.data || error.message);
      Alert.alert('L·ªói', error?.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ l∆∞u ƒë·ªãa ch·ªâ. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <View style={{ alignItems: 'center', marginBottom: 24 }}>
        <Image
          source={require('@/assets/images/address.png')}
          style={{ width: 150, height: 150, resizeMode: 'contain' }}
        />
      </View>
      <Text style={styles.title}>V·ªã tr√≠ c·ªßa b·∫°n l√† g√¨?</Text>

      <View style={styles.inputContainer}>
        <Text style={styles.label}>ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn:</Text>
        <View style={styles.resultBox}>
          <Text style={styles.addressText}>{displayAddress}</Text>
        </View>
      </View>

      <View style={styles.bottomButtonContainer}>

        <TouchableOpacity
          style={styles.button}
          onPress={() => {
            const accountId = route.params?.account_id;
            const userId = route.params?.user_id || route.params?.profile_id;
            navigation.navigate('ManualAddress', {
              email: route.params?.email,
              password: route.params?.password,
              fullName: route.params?.fullName,
              phone: route.params?.phone,
              gender: route.params?.gender,
              avatar: route.params?.avatar,
              account_id: accountId,
              user_id: userId,
            });
          }}
        >
          <Text style={styles.buttonText}>Ch·ªçn v·ªã tr√≠ th·ªß c√¥ng</Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity
        style={[styles.completeButton, isLoading && styles.disabledButton]}
        onPress={handleCompleteAddress}
        disabled={isLoading}
      >
        <Text style={styles.completeButtonText}>
          {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'Ho√†n th√†nh'}
        </Text>
      </TouchableOpacity>
    </View>
  );
};

export default AddressScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 24,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 20,
    marginBottom: 15,
    textAlign: 'center',
    fontWeight: 'bold',
    color: '#333',
  },
  inputContainer: {
    marginVertical: 16,
    padding: 16,
    backgroundColor: '#fff',
    borderRadius: 10,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 3,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    color: '#555',
  },
  resultBox: {
    padding: 12,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    backgroundColor: '#f9f9f9',
    minHeight: 50,
    justifyContent: 'center',
  },
  addressText: {
    fontSize: 14,
    color: '#333',
    lineHeight: 20,
  },
  button: {
    flex: 1,
    backgroundColor: '#fff',
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 4,
    borderColor: '#6B4F35',
    borderWidth: 1,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 3,
    elevation: 2,
  },
  buttonText: {
    color: '#6B4F35',
    fontSize: 14,
    fontWeight: '500',
    textAlign: 'center',
  },
  bottomButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  completeButton: {
    marginTop: 20,
    padding: 16,
    backgroundColor: '#6B4F35',
    borderRadius: 25,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.2,
    shadowOffset: { width: 0, height: 3 },
    shadowRadius: 4,
    elevation: 4,
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
  completeButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});